{"/home/travis/build/npmtest/node-npmtest-wakatimecli/test.js":"/* istanbul instrument in package npmtest_wakatimecli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wakatimecli/lib.npmtest_wakatimecli.js":"/* istanbul instrument in package npmtest_wakatimecli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wakatimecli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wakatimecli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wakatimecli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wakatimecli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wakatimecli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wakatimecli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wakatimecli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wakatimecli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wakatimecli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wakatimecli.__dirname + '/lib.npmtest_wakatimecli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wakatimecli/node_modules/wakatimecli/lib/wakatime.js":"var fs = require('fs');\n\nfunction convertThis() {\n\n  var Promise = require(\"bluebird\");\n  var request = Promise.promisify(require(\"request\"));\n  var moment = require(\"moment\");\n  var clc = require('cli-color');\n  var fs = require('fs');\n\n  // Create clc color variables\n  var yellow = clc.yellow;\n  var blue = clc.blue;\n  var cyan = clc.cyan;\n  var magenta = clc.magenta;\n\n  var apiString = '?api_key=';\n  var homedir = (process.platform === 'win32') ? process.env.HOMEPATH : process.env.HOME;\n  var wakafile = homedir + '/.wakafile';\n\n  // Stores API Key in app directory'\n  var setApiKey = function(apiKey){\n    fs.writeFile(wakafile, apiKey, function (err) {\n      if (err) throw err;\n      console.log('API key saved.');\n    });\n  };\n\n  // Throw file error\n  var fileError = function(){\n    console.log(' ');\n    console.log(cyan(' No API Key provided'));\n    console.log(cyan(\" Example: \") + magenta(\"wakatime -api 'your key here' \"));\n    console.log(cyan(' Note: ') + magenta(\"your api key is available @ https://wakatime.com/settings\"));\n    console.log(' ');\n    process.exit(code=0);\n  };\n\n  // Reads API Key from app directory\n  var readApiKey =  function(){\n    var key;\n    try {\n      key = fs.readFileSync(wakafile,'utf8');\n    } catch (e) {\n      fileError();\n    }\n    if(key === ''){\n      fileError();\n    }\n    return fs.readFileSync(wakafile,'utf8');\n  }\n\n  // Date function used to format date on API request\n  var todaysDate = function(){\n\n    return {\n      day: moment().format('L'),\n      yesterday: moment().subtract(1, 'days').format('L'),\n      week: moment().subtract(6, 'days').format('L'),\n      month: moment().subtract(29, 'days').format('L'),\n      year: moment().subtract(364, 'days').format('L')\n    }\n\n  };\n\n  var formatTime = function(seconds) {\n    hour = ~~(seconds / 3600);\n    minute = ~~((seconds - (hour * 3600)) / 60);\n    second = seconds % 60;\n    return hour + ' hours ' + minute + ' minutes ' + second + ' seconds '\n  }\n\n\n  // Prints provided obj to terminal with magenta or blue color\n  var printSection = function(obj, color){\n    // sort it first\n    sortable = [];\n    for (key in obj) {\n      sortable.push([key, obj[key]])\n    }\n    sorted = sortable.sort(function(a, b) { return b[1] - a[1]});\n\n    for (var i=0; i<sorted.length; i++){\n      if(color === 'magenta'){\n        console.log(magenta(' ' + sorted[i][0] + ': ') + formatTime(sorted[i][1]));\n      } else if(color === 'blue'){\n        console.log(blue(' ' + sorted[i][0] + ': ') + formatTime(sorted[i][1]));\n      }\n    }\n  };\n\n  // Help prints all available options\n  var help = function(){\n    console.log(' ');\n    console.log(cyan('Please pass an option:'));\n    console.log(yellow('  -? or -help'));\n    console.log(yellow('  -u or -user'));\n    console.log(yellow('  -t or -today'));\n    console.log(yellow('  -y or -yesterday'));\n    console.log(yellow('  -w or -week'));\n    console.log(' ');\n  };\n\n  // Prints user data to the terminal\n  var user = function(){\n    var apiKey = readApiKey();\n    request(\"https://wakatime.com/api/v1/users/current\" + apiString + apiKey, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        var body = JSON.parse(body);\n        console.log('');\n        console.log(cyan('WakaTime Account Details:'));\n        console.log(magenta('  Account Created: ') + body.data.created_at);\n        console.log(magenta('  Email: ') + body.data.email);\n        if(body.data.full_name > '') {\n          console.log(magenta('  Full Name: ') + body.data.full_name);\n        }\n        console.log('');\n      }\n    })\n  };\n\n  // Parse data for Today or Yesterday option & prints to terminal\n  var details = function(day, dayText){\n    var apiKey = readApiKey();\n    request(\"https://wakatime.com/api/v1/users/current/summaries?start=\"+day+\"&end=\"+day+\"&api_key=\"+apiKey, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        var body = JSON.parse(body);\n\n        console.log(' '); // Empty Line for formatting\n        console.log(' ' +cyan(dayText + ': ') + body.data[0].grand_total.text + ' (Total)'); // Prints provided total hours/minutes\n        console.log(' '); // Empty Line for formatting\n\n        body.data[0].languages.forEach(function(val){\n          console.log(magenta(' ' + val.name + ': ') + val.text); // Prints calculated total hours/minutes\n        })\n\n        console.log(' '); // Empty Line for formatting\n\n        body.data[0].projects.forEach(function(val){\n          console.log(blue(' '+ val.name + ': ') + val.text); // Prints calculated total hours/minutes\n        })\n\n        console.log(' '); // Empty Line for formatting\n\n      } else {\n        console.log(error);\n      }\n    })\n  };\n\n\n  // Parse data for last seven days of work and print to console\n  var week = function(day, dayText, day2){\n    var apiKey = readApiKey();\n    request(\"https://wakatime.com/api/v1/users/current/summaries?start=\"+day+\"&end=\"+day2+\"&api_key=\"+apiKey, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        var body = JSON.parse(body);\n        var gtHours = 0;\n        var gtMinutes = 0;\n        var languages = {};\n        var projects = {};\n\n        // Iterates through returned object and adds alll hours\n        body.data.forEach(function(val){\n          gtHours = gtHours + val.grand_total.hours;\n          gtMinutes = gtMinutes + val.grand_total.minutes;\n        })\n\n        // Converts minutes to hours and adds to total\n        if(gtMinutes > 59) {\n          var gtHours = gtHours + Math.floor(gtMinutes / 60);\n          var gtMinutes = gtMinutes % 60;\n        }\n\n        // Iterates through returned object and finds all unique language names\n        // Adds all corresponding time to each language\n        body.data.forEach(function(val){\n          val.languages.forEach(function(val){\n            if (!(val.name in languages)) {\n              languages[val.name] = val.total_seconds;\n            } else {\n              languages[val.name] = languages[val.name] + val.total_seconds;\n            }\n          })\n        })\n\n        // Iterates through returned object and finds all unique project names\n        // Adds all corresponding time to each project\n        body.data.forEach(function(val){\n          val.projects.forEach(function(val){\n            var time = [val.hours, val.minutes];\n            if (!(val.name in projects)) {\n              projects[val.name] = val.total_seconds;\n            } else {\n              projects[val.name] = projects[val.name] + val.total_seconds;\n            }\n          })\n        })\n\n        // Week Data logged to terminal here\n        console.log(' '); // Empty Line for formatting\n        console.log(' ' +cyan(dayText +': ') + gtHours + ' hours ' + gtMinutes + ' minutes (Total)'); // Prints calculated total hours/minutes\n        console.log(' '); // Empty Line for formatting\n        printSection(languages, 'magenta'); // Prints each item in the obj\n        console.log(' '); // Empty Line for formatting\n        printSection(projects, 'blue'); // Prints each item in the obj\n        console.log(' '); // Empty Line for formatting\n\n      } else {\n        console.log('error - ', error);\n      }\n    })\n  };\n\n  // Slice arguments to remove defaults\n  var args = process.argv.slice(2);\n\n  // If no arguments are passed call help function\n  if(args.length === 0){\n    help();\n  }\n\n  // Find arguments and call corresponding functionality\n  args.forEach(function(val) {\n    if(val === '-t' || val === '-today') {\n      var day = todaysDate();\n      details(day.day, \"Today\");\n    } else if(val === '-y' || val === '-yesterday') {\n      var day = todaysDate();\n      details(day.yesterday, \"Yesterday\");\n    } else if(val === '-w' || val === '-week') {\n      var day = todaysDate();\n      week(day.week, \"Week\", day.day);\n    } else if(val === '-m' || val === '-month') {\n      var day = todaysDate();\n      week(day.month, \"Month\", day.day);\n    } else if(val === '-yr' || val === '-year') {\n      var day = todaysDate();\n      console.log('year ', day.year, ' day ', day.day);\n      week(day.year, \"Year\", day.day);\n    } else if(val === '-u' || val === '-user') {\n      user();\n    } else if(val === '-help') {\n      help();\n    } else if(val === '-api') {\n      if(args[1] === undefined){\n        setApiKey('');\n      } else {\n        setApiKey(args[1]); // Save ApiKey to file\n        args.splice(1); // Splice array so loop is not run again\n      }\n    } else {\n      console.log('No arguments given');\n    }\n  });\n\n}\nexports.convert = convertThis;\n"}